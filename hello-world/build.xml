<project xmlns:ivy="antlib:org.apache.ivy.ant" name="hello-world" basedir="." default="jar">
	<property name="build.dir"         value="target"/>
	<property name="build.lib.dir"     value="${build.dir}/lib"/>
	<property name="classes.dir"       value="${build.dir}/classes"/>
	<property name="classes.test.dir"  value="${build.dir}/test-classes"/>
	<property name="lib.dir"           value="lib"/>
	<property name="reports.dir"       value="reports"/>
	<property name="src.dir"           value="src/main/java"/>
	<property name="src.test.dir"      value="src/test/java"/>
	<property name="version"           value="1.0-SNAPSHOT" />
	<property name="jar.file"          value="${build.dir}/${ant.project.name}-all-${version}.jar" />

	<target name="clean">
	  <delete dir="${build.dir}"/>
	  <delete dir="${lib.dir}"/>
	  <delete dir="${reports.dir}"/>
	</target>
	
	<!--
	TODO:
	Perform an Ivy retrieve using a pathid of 'compile.classpath' and a pattern of
	'${ivy.lib.dir}/[conf]/[artifact].[ext]'.
	  
	Create two cachefilesets: one for the 'compile' configuration and another for 
	the 'test' configuration. The ID of the first cachefileset should be 'compile.classpath'
	and the ID of the second should be 'test.classpath'.
	-->
    <target name="resolve">
    	<ivy:retrieve pathid="compile.classpath" 
    					pattern="${ivy.lib.dir}/[conf]/[artifact].[ext]" />
    	<ivy:cachefileset setid="compile.classpath" conf="compile" />
    	<ivy:cachefileset setid="test.classpath" conf="test" />
    </target>

	<!--
	TODO: Create a zipgroupfileset that references the 'compile.classpath' fileset
	created in the "resolve" target above.
	-->
    <target name="copy-dependencies">
      <mkdir dir="${build.lib.dir}" />
	  <jar jarfile="${build.lib.dir}/dependencies-all.jar">
	  	<zipgroupfileset refid="compile.classpath" />
      </jar>
	</target>
	
	<!--
	TODO: Make this target depend on the 'clean' and 'resolve' targets.
	-->
		<!--
		TODO: Define the classpath to be a combination of the 'test.classpath' fileset
		created by the "resolve" target above and a pathelement of the 'classes.dir' property.
		-->
	<target name="compile" depends= "clean,resolve">
	  <mkdir dir="${classes.dir}"/>
	  <javac srcdir="${src.dir}" destdir="${classes.dir}">
	  	<classpath>
	  		<fileset refid="compile.classpath" />
	  		<pathelement path="${classes.dir}" />
	  	</classpath>
	  </javac>
	</target>
	
	<!--
	TODO: Make this target depend on the 'compile' target.
	-->
		<!--
		TODO: Define the classpath to be a combination of the 'test.classpath' fileset
		created by the "resolve" target above, a pathelement of the 'classes.dir' property,
		and a second pathelement of the 'classes.test.dir' property.
		-->
	<target name="test-compile" depends="compile">
	  <mkdir dir="${classes.test.dir}"/>
	  <javac srcdir="${src.test.dir}" destdir="${classes.test.dir}">
	  	<classpath>
	  		<fileset refid="test.classpath" />
	  		<pathelement path="${classes.dir}" />
	  		<pathelement path="${classes.test.dir}" />
	  	</classpath>
	  </javac>
	</target>

	<!--
	TODO: Define the classpath to be a combination of the 'test.classpath' fileset
	created by the "resolve" target above, a pathelement of the 'classes.dir' property,
	and a second pathelement of the 'classes.test.dir' property.
	-->
	<target name="test" depends="test-compile">
	  <mkdir dir="${reports.dir}"/>
      <junit printsummary="yes" haltonfailure="yes">
	  	<classpath>
	  		<fileset refid="test.classpath" />
	  		<pathelement path="${classes.dir}" />
	  		<pathelement path="${classes.test.dir}" />
	  	</classpath>
		<formatter type="plain" />
        
		<batchtest fork="yes" todir="${reports.dir}">
          <fileset dir="${src.test.dir}">
            <include name="**/*Test.java"/>
          </fileset>
		</batchtest>
      </junit>
	</target>

	<!--
	TODO: Make this target depend on the 'test' and 'copy-dependencies'
	targets.
	-->
	<target name="jar" depends="test,copy-dependencies" >
      <jar destfile="${jar.file}" basedir="${classes.dir}">
		<manifest>
		  <attribute name="Main-Class" value="hello.HelloWorld"/>
		</manifest>
        <zipfileset src="${build.lib.dir}/dependencies-all.jar" />
	  </jar>
	</target>
</project>